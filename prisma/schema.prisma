generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model comments {
  id             String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  task_id        String     @db.Uuid
  user_id        String     @db.Uuid
  content        String
  parent_id      String?    @db.Uuid
  created_at     DateTime?  @default(now()) @db.Timestamp(6)
  project_id     String?    @db.Uuid
  comments       comments?  @relation("commentsTocomments", fields: [parent_id], references: [id], onUpdate: NoAction, map: "fk_comment_parent")
  other_comments comments[] @relation("commentsTocomments")
  projects       projects?  @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_comment_project")
  tasks          tasks      @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_comment_task")
  users          users      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_comment_user")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model project_members {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  project_id String    @db.Uuid
  role       roles
  created_at DateTime? @default(now()) @db.Timestamp(6)
  projects   projects  @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_project_member_project")
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_project_member_user")

  @@unique([user_id, project_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model projects {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String            @db.VarChar(255)
  description     String?
  team_id         String            @db.Uuid
  owner_id        String            @db.Uuid
  created_at      DateTime?         @default(now()) @db.Timestamp(6)
  start_date      DateTime?         @default(now()) @db.Timestamptz(6)
  end_date        DateTime?         @db.Timestamptz(6)
  comments        comments[]
  project_members project_members[]
  users           users             @relation(fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_project_owner")
  teams           teams             @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_project_team")
  tasks           tasks[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model task_assignees {
  id                                      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  task_id                                 String    @db.Uuid
  user_id                                 String    @db.Uuid
  assigned_by                             String    @db.Uuid
  created_at                              DateTime? @default(now()) @db.Timestamp(6)
  users_task_assignees_assigned_byTousers users     @relation("task_assignees_assigned_byTousers", fields: [assigned_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_task_assignee_assigned_by")
  tasks                                   tasks     @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_task_assignee_task")
  users_task_assignees_user_idTousers     users     @relation("task_assignees_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_task_assignee_user")

  @@unique([user_id, task_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model tasks {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title          String           @db.VarChar(255)
  tags           String[]
  description    String?
  project_id     String           @db.Uuid
  created_by     String           @db.Uuid
  status         task_status
  priority       priority
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  start_date     DateTime?        @db.Timestamptz(6)
  end_date       DateTime?        @db.Timestamptz(6)
  comments       comments[]
  task_assignees task_assignees[]
  users          users            @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_task_creator")
  projects       projects         @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_task_project")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model team_members {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  team_id    String    @db.Uuid
  role       roles
  created_at DateTime? @default(now()) @db.Timestamp(6)
  teams      teams     @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_team_member_team")
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_team_member_user")

  @@unique([user_id, team_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model teams {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String         @db.VarChar(255)
  description  String?
  owner_id     String         @db.Uuid
  created_at   DateTime?      @default(now()) @db.Timestamp(6)
  projects     projects[]
  team_members team_members[]
  users        users          @relation(fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_team_owner")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model users {
  id                                               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                            String            @unique @db.VarChar(255)
  name                                             String            @db.VarChar(255)
  profile_picture                                  String?           @db.VarChar(255)
  created_at                                       DateTime?         @default(now()) @db.Timestamp(6)
  comments                                         comments[]
  project_members                                  project_members[]
  projects                                         projects[]
  task_assignees_task_assignees_assigned_byTousers task_assignees[]  @relation("task_assignees_assigned_byTousers")
  task_assignees_task_assignees_user_idTousers     task_assignees[]  @relation("task_assignees_user_idTousers")
  tasks                                            tasks[]
  team_members                                     team_members[]
  teams                                            teams[]
}

enum priority {
  low
  medium
  high
}

enum roles {
  owner
  team_admin
  project_admin
  contributor
  viewer
}

enum task_status {
  backlog
  in_review
  in_progress
  complete
}
